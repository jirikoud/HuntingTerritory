@using HuntingModel.Localization
@model HuntingModel.ViewModel.TerritoryDetailViewModel

<h2>@Model.Name</h2>
<div class="map-block">
    <div id="map-canvas" class="canvas"></div>
</div>
<div id="map-legend" class="map-legend">
    <ul>
        <li>
            @TerritoryRes.LABEL_HUNTING_GROUNDS
            <ul id="hunting-ground-list"></ul>
            <input class="btn btn-default add-map-object" data-type="0" type="button" value="@TerritoryRes.BUTTON_APPEND_HUNTING_GROUND" />
        </li>
        <li>
            @TerritoryRes.LABEL_FEEDING_PLACES
            <ul id="feeding-place-list">
                @foreach (var feedingPlace in Model.FeedingPlaceList)
                {
                    <li>
                        @feedingPlace.Name
                    </li>
                }
            </ul>
            <input class="btn btn-default add-map-object" data-type="1" type="button" value="@TerritoryRes.BUTTON_APPEND_FEEDING_PLACE" />
        </li>
        <li>
            @TerritoryRes.LABEL_SHOOTING_PLACES
            <ul id="shooting-place-list">
                @foreach (var shootingPlace in Model.ShootingPlaceList)
                {
                    <li>
                        @shootingPlace.Name
                    </li>
                }
            </ul>
            <input class="btn btn-default add-map-object" data-type="2" type="button" value="@TerritoryRes.BUTTON_APPEND_SHOOTING_PLACE" />
        </li>
    </ul>

</div>
<div>
    @Html.ActionLink(GlobalRes.BUTTON_BACK, "Detail", "Territory", new { id = Model.Id }, new { @class = "btn btn-default" })
    <span class="button-inline">
        <span id="save-in-progress">@TerritoryRes.LABEL_SAVE_IN_PROGRESS</span>
        <input id="button-save" class="btn btn-default" type="button" value="@TerritoryRes.BUTTON_SAVE" />
    </span>
    <span id="save-result"></span>
</div>

@section scripts {
<script type="text/javascript"
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWPQs4TBURe-y_7ASpPHxIeK3hWy3OsiU">
</script>
<script type="text/javascript">
    var map;
    var infoWindow;
    var objectTypeList = ["hunting-ground", "feeding-place", "shooting-place"];
    var polygonArray = [];
    var feedingArray = [];
    var shootingArray = [];
    var editMode;

    function findArrayByTypeIndex(typeIndex)
    {
        var array = null;
        switch (typeIndex) {
            case 0: array = polygonArray;
                break;
            case 1: array = feedingArray;
                break;
            case 2: array = shootingArray;
                break;
        }
        return array;
    }

    function updateLegend() {
        for (var typeIndex = 0; typeIndex < objectTypeList.length; typeIndex++) {
            var list = findArrayByTypeIndex(typeIndex);
            var listString = '#' + objectTypeList[typeIndex] + '-list';
            var listTag = $(listString);
            listTag.html('');
            for (var index = 0; index < list.length; index++) {
                listTag.append('<li data-index="' + index + '" data-type="' + typeIndex + '">' +
                    '<a href="#" class="name-map-object">' + list[index].name + '</a>' +
                    '<input type="text"/>' +
                    '<a href="#" class="rename-map-object">O</a>' +
                    '<a href="#" class="confirm-map-object">V</a>' +
                    '<a href="#" class="delete-map-object">X</a></li>');
            }
            listTag.find('input').hide();
            listTag.find('.confirm-map-object').hide();
        }
    }

    function initialize() {
        var mapOptions = {
            zoom: 7,
            center: new google.maps.LatLng(50.000000, 15.000000),
        };

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);


        // Define the LatLng coordinates for the polygon.
        var polygonCoords = [];
        var feedingCoords = [];

        @for (int index = 0; index < Model.HuntingGroundList.Count; index++)
        {
            var huntingGround = Model.HuntingGroundList[index];
            @Html.Raw(string.Format("\npolygonCoords[{0}] = [", index));
            foreach (var coordinate in huntingGround.Polygon)
            {
                @Html.Raw(string.Format("\nnew google.maps.LatLng({0}, {1}),",
                    coordinate.Lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
                    coordinate.Lng.ToString(System.Globalization.CultureInfo.InvariantCulture)));
            }
            @Html.Raw("\n];");
            @Html.Raw(string.Format("\npolygonArray[{0}] = new Object();", index));
            @Html.Raw(string.Format("\npolygonArray[{0}].id = {1};", index, huntingGround.Id));
            @Html.Raw(string.Format("\npolygonArray[{0}].name = '{1}';", index, Html.Encode(huntingGround.Name)));
        }
        @for (int index = 0; index < Model.FeedingPlaceList.Count; index++)
        {
            var mapObject = Model.FeedingPlaceList[index];
            @Html.Raw(string.Format("\nfeedingCoords[{0}] = new google.maps.LatLng({1}, {2});",
                index,
                mapObject.Coordinate.Lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
                mapObject.Coordinate.Lng.ToString(System.Globalization.CultureInfo.InvariantCulture)));
            @Html.Raw(string.Format("\nfeedingArray[{0}] = new Object();", index));
            @Html.Raw(string.Format("\nfeedingArray[{0}].id = {1};", index, mapObject.Id));
            @Html.Raw(string.Format("\nfeedingArray[{0}].name = '{1}';", index, Html.Encode(mapObject.Name)));
        }

        for (var index = 0; index < polygonCoords.length; index++) {
            // Construct the polygon.
            polygonArray[index].shape = new google.maps.Polygon({
                paths: polygonCoords[index],
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 3,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                editable: false,
                draggable: false,
                map: map,
            });
        }
        for (var index = 0; index < feedingCoords.length; index++) {
            // Construct the marker.
            feedingArray[index].shape = new google.maps.Marker({
                position: feedingCoords[index],
                draggable: true,
                map: map,
                title:feedingArray[index].name,
            });
        }

        var bounds = new google.maps.LatLngBounds();

        for (var index = 0; index < polygonArray.length; index++) {
            var polygon = polygonArray[index].shape;
            var vertices = polygon.getPath();
            for (var verticesIndex = 0; verticesIndex < vertices.getLength(); verticesIndex++) {
                bounds.extend(vertices.getAt(verticesIndex));
            }
            google.maps.event.addListener(polygon, 'click', onHuntingGroundClick);
        }
        for (var index = 0; index < feedingArray.length; index++) {
            var marker = feedingArray[index].shape;
            bounds.extend(marker.getPosition());
        }
        map.fitBounds(bounds);
        infoWindow = new google.maps.InfoWindow();
        updateLegend();
    }

    function onHuntingGroundClick(event) {

        var contentString = '';
        for (var index = 0; index < polygonArray.length; index++) {
            var polygon = polygonArray[index].shape;
            polygon.setEditable(polygon == this);
            polygon.setDraggable(polygon == this);
            if (polygon == this)
            {
                contentString = '<b>' + polygonArray[index].name + '</b>';
            }
        }
        if (contentString.length > 0)
        {
            // Replace the info window's content and position.
            infoWindow.setContent(contentString);
            infoWindow.setPosition(event.latLng);
            infoWindow.open(map);
        }
    }

    function findNewName(typeIndex) {
        var itemArray = findArrayByTypeIndex(typeIndex);
        var newName = '';
        switch (typeIndex) {
            case 0: newName = '@TerritoryRes.NEW_HUNTING_GROUND_NAME';
                break;
            case 1: newName = '@TerritoryRes.NEW_FEEDING_PLACE_NAME';
                break;
            case 2: newName = '@TerritoryRes.NEW_SHOOTING_PLACE_NAME';
                break;
        }
        var newIndex = 1;
        var exists = true;
        while (exists) {
            exists = false;
            for (var index = 0; index < itemArray.length; index++) {
                if (newName + newIndex === itemArray[index].name)
                {
                    newIndex++;
                    exists = true;
                    break;
                }
            }
        }
        return newName + newIndex;
    }

    function addMapObjectClick() {
        var typeIndex = $(this).data("type");
        var itemArray = findArrayByTypeIndex(typeIndex);

        infoWindow.close(map);
        for (var index = 0; index < polygonArray.length; index++) {
            var polygon = polygonArray[index].shape;
            polygon.setEditable(false);
            polygon.setDraggable(false);
        }

        var bounds = map.getBounds();
        var east = bounds.getNorthEast().lat();
        var west = bounds.getSouthWest().lat();
        var north = bounds.getNorthEast().lng();
        var south = bounds.getSouthWest().lng();
        var latDistance = Math.abs(east - west) / 4;
        var lngDistance = Math.abs(south - north) / 4;
        var center = new google.maps.LatLng((east+west)/2, (north + south) / 2);

        if (typeIndex == 0)
        {
            var areaCoords = [
                new google.maps.LatLng(center.lat() - latDistance, center.lng() - lngDistance),
                new google.maps.LatLng(center.lat() + latDistance, center.lng() - lngDistance),
                new google.maps.LatLng(center.lat() + latDistance, center.lng() + lngDistance),
                new google.maps.LatLng(center.lat() - latDistance, center.lng() + lngDistance),
            ];

            // Construct the polygon.
            var newArea = new google.maps.Polygon({
                paths: areaCoords,
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 3,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                editable: true,
                draggable: true,
                map: map,
            });
            var newObject = new Object();
            newObject.shape = newArea;
            newObject.id = -1;
            newObject.name = findNewName(typeIndex);
            itemArray.push(newObject);
            google.maps.event.addListener(newArea, 'click', onHuntingGroundClick);
        }
        if (typeIndex > 0)
        {
            var newMarker = new google.maps.Marker({
                position: center,
                map: map,
                draggable: true,
            });
            var newObject = new Object();
            newObject.id = -1;
            newObject.name = findNewName(typeIndex);
            newObject.shape = newMarker;
            newMarker.setTitle(newObject.name);
            itemArray.push(newObject);
        }
        updateLegend();
    }

    function deleteMapObjectClick() {
        infoWindow.close(map);
        var index = $(this).parent().data('index');
        var typeIndex = $(this).parent().data("type");
        var itemArray = findArrayByTypeIndex(typeIndex);
        itemArray[index].shape.setMap(null);
        itemArray.splice(index, 1);
        updateLegend();
    }

    function renameMapObjectClick() {
        infoWindow.close(map);
        var item = $(this).parent();
        var list = item.parent();

        list.find('a.name-map-object').show();
        list.find('a.rename-map-object').show();
        list.find('a.confirm-map-object').hide();
        list.find('input').hide();

        $(this).hide();
        item.find('a.name-map-object').hide();
        item.find('a.confirm-map-object').show();
        item.find('input').val(item.find('a.name-map-object').html()).show().focus();
    }

    function confirmMapObjectClick() {
        infoWindow.close(map);
        var item = $(this).parent();
        var index = item.data('index');
        var typeIndex = item.data("type");
        var itemArray = findArrayByTypeIndex(typeIndex);
        itemArray[index].name = item.find('input').val();
        updateLegend();
    }

    function focusMapObjectClick(){
        infoWindow.close(map);
        var item = $(this).parent();
        var focusedIndex = item.data('index');
        var typeIndex = item.data("type");
        if (typeIndex == 0)
        {
            for (var index = 0; index < polygonArray.length; index++) {
                var polygon = polygonArray[index].polygon;
                polygon.setEditable(index == focusedIndex);
                polygon.setDraggable(index == focusedIndex);
            }
        }
        if (typeIndex == 1)
        {
            for (var index = 0; index < feedingArray.length; index++) {
                var polygon = feedingArray[index].polygon;
                polygon.setDraggable(index == focusedIndex);
            }
        }
    }

    function saveChanges() {
        infoWindow.close(map);
        var polygonString = '[';
        for (var index = 0; index < polygonArray.length; index++) {
            var polygon = polygonArray[index].shape;
            polygonString += '{id:' + polygonArray[index].id + ';name:' + polygonArray[index].name + ';coords:';
            var vertices = polygon.getPath();
            for (var i = 0; i < vertices.getLength() ; i++) {
                var xy = vertices.getAt(i);
                polygonString += '(' + xy.lat() + ',' + xy.lng() + ')';
            }
            polygonString += '}';
        }
        polygonString += '][';
        for (var index = 0; index < feedingArray.length; index++) {
            var xy = feedingArray[index].shape.getPosition();
            polygonString += '{id:' + feedingArray[index].id + ';name:' + feedingArray[index].name + ';coords:';
            polygonString += '(' + xy.lat() + ',' + xy.lng() + ')';
            polygonString += '}';
        }
        polygonString += '][';
        for (var index = 0; index < shootingArray.length; index++) {
            var xy = shootingArray[index].shape.getPosition();
            polygonString += '{id:' + shootingArray[index].id + ';name:' + shootingArray[index].name + ';coords:';
            polygonString += '(' + xy.lat() + ',' + xy.lng() + ')';
            polygonString += '}';
        }
        polygonString += ']';
        $("#save-in-progress").show();
        $("#button-save").hide();
        $.ajax({
            type: "POST",
            url: BASEPATH + "Territory/SaveMapAjax",
            data: { id: @Model.Id, polygon: polygonString },
        }).done(function (data) {
            $("#button-save").show();
            $("#save-in-progress").hide();
            $('#save-result').html(data).hide().delay(500).fadeIn().delay(1000).fadeOut();
            var idList = $('#save-result').find("div.new-hunting-ids").data("new-ids").toString().split(",");
            var newIdListIndex = 0;
            for (var index = 0; index < polygonArray.length; index++) {
                if (polygonArray[index].id == -1)
                {
                    polygonArray[index].id = idList[newIdListIndex];
                    newIdListIndex++;
                }
            }
        });
    }

    $(document).ready(function () {
        $("#map-legend").on("click", ".add-map-object", addMapObjectClick);
        $("#map-legend").on("click", ".delete-map-object", deleteMapObjectClick);
        $("#map-legend").on("click", ".rename-map-object", renameMapObjectClick);
        $("#map-legend").on("click", ".confirm-map-object", confirmMapObjectClick);
        $("#map-legend").on("click", ".focus-map-object", focusMapObjectClick);

        $("#button-save").on("click", saveChanges);
        $("#save-in-progress").hide();
    });
    google.maps.event.addDomListener(window, 'load', initialize);

</script>
}
