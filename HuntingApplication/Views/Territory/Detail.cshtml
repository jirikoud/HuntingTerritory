@using HuntingModel.Localization
@model HuntingModel.ViewModel.TerritoryDetailViewModel

<h2>@Model.Name</h2>
<div class="map-block">
    <div id="map-canvas" class="canvas"></div>
</div>
<div id="map-legend" class="map-legend">
    <ul>
        <li>
            @TerritoryRes.LABEL_HUNTING_GROUNDS
            <ul id="hunting-ground-list">
                @foreach (var item in Model.HuntingGroundList)
                {
                    <li>
                        @item.Name
                    </li>
                }
            </ul>
        </li>
        <li>
            @TerritoryRes.LABEL_FEEDING_PLACES
            <ul id="feeding-place-list">
                @foreach (var feedingPlace in Model.FeedingPlaceList)
                {
                    <li>
                        @feedingPlace.Name
                    </li>
                }
            </ul>
        </li>
        <li>
            @TerritoryRes.LABEL_SHOOTING_PLACES
            <ul id="shooting-place-list">
                @foreach (var shootingPlace in Model.ShootingPlaceList)
                {
                    <li>
                        @shootingPlace.Name
                    </li>
                }
            </ul>
        </li>
    </ul>

</div>
<p>
    @Html.ActionLink(GlobalRes.BUTTON_BACK, "Index", "Home", null, new { @class = "btn btn-default" })
    @Html.ActionLink(TerritoryRes.BUTTON_EDIT_MAP, "EditMap", "Territory", new { id = Model.Id }, new { @class = "btn btn-default" })
</p>

@section scripts {
    <script type="text/javascript"
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBWPQs4TBURe-y_7ASpPHxIeK3hWy3OsiU">
    </script>
    <script type="text/javascript">
    var map;
    var infoWindow;
    var objectTypeList = ["hunting-ground", "feeding-place", "shooting-place"];
    var polygonArray = [];
    var feedingArray = [];
    var shootingArray = [];
    var editMode;

    function findArrayByTypeIndex(typeIndex)
    {
        var array = null;
        switch (typeIndex) {
            case 0: array = polygonArray;
                break;
            case 1: array = feedingArray;
                break;
            case 2: array = shootingArray;
                break;
        }
        return array;
    }

    function initialize() {
        var mapOptions = {
            zoom: 7,
            center: new google.maps.LatLng(50.000000, 15.000000),
        };

        map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);

        // Define the LatLng coordinates for the polygon.
        var polygonCoords = [];
        var feedingCoords = [];

        @for (int index = 0; index < Model.HuntingGroundList.Count; index++)
        {
            var huntingGround = Model.HuntingGroundList[index];
            @Html.Raw(string.Format("\npolygonCoords[{0}] = [", index));
            foreach (var coordinate in huntingGround.Polygon)
            {
                @Html.Raw(string.Format("\nnew google.maps.LatLng({0}, {1}),",
                    coordinate.Lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
                    coordinate.Lng.ToString(System.Globalization.CultureInfo.InvariantCulture)));
            }
            @Html.Raw("\n];");
            @Html.Raw(string.Format("\npolygonArray[{0}] = new Object();", index));
            @Html.Raw(string.Format("\npolygonArray[{0}].id = {1};", index, huntingGround.Id));
            @Html.Raw(string.Format("\npolygonArray[{0}].name = '{1}';", index, Html.Encode(huntingGround.Name)));
        }
        @for (int index = 0; index < Model.FeedingPlaceList.Count; index++)
        {
            var mapObject = Model.FeedingPlaceList[index];
            @Html.Raw(string.Format("\nfeedingCoords[{0}] = new google.maps.LatLng({1}, {2});",
                index,
                mapObject.Coordinate.Lat.ToString(System.Globalization.CultureInfo.InvariantCulture),
                mapObject.Coordinate.Lng.ToString(System.Globalization.CultureInfo.InvariantCulture)));
            @Html.Raw(string.Format("\nfeedingArray[{0}] = new Object();", index));
            @Html.Raw(string.Format("\nfeedingArray[{0}].id = {1};", index, mapObject.Id));
            @Html.Raw(string.Format("\nfeedingArray[{0}].name = '{1}';", index, Html.Encode(mapObject.Name)));
        }

        for (var index = 0; index < polygonCoords.length; index++) {
            // Construct the polygon.
            polygonArray[index].shape = new google.maps.Polygon({
                paths: polygonCoords[index],
                strokeColor: '#FF0000',
                strokeOpacity: 0.8,
                strokeWeight: 3,
                fillColor: '#FF0000',
                fillOpacity: 0.35,
                editable: false,
                draggable: false,
                map: map,
            });
        }
        for (var index = 0; index < feedingCoords.length; index++) {
            // Construct the marker.
            feedingArray[index].shape = new google.maps.Marker({
                position: feedingCoords[index],
                draggable: false,
                map: map,
                title:feedingArray[index].name,
            });
        }

        var bounds = new google.maps.LatLngBounds();

        for (var index = 0; index < polygonArray.length; index++) {
            var polygon = polygonArray[index].shape;
            var vertices = polygon.getPath();
            for (var verticesIndex = 0; verticesIndex < vertices.getLength(); verticesIndex++) {
                bounds.extend(vertices.getAt(verticesIndex));
            }
            google.maps.event.addListener(polygon, 'click', onHuntingGroundClick);
        }
        for (var index = 0; index < feedingArray.length; index++) {
            var marker = feedingArray[index].shape;
            bounds.extend(marker.getPosition());
        }
        if (bounds.getCenter().lat() != 0 && bounds.getCenter().lng() != -180) {
            map.fitBounds(bounds);
        }
        infoWindow = new google.maps.InfoWindow();
    }

    function onHuntingGroundClick(event) {

        var contentString = '';
        for (var index = 0; index < polygonArray.length; index++) {
            var polygon = polygonArray[index].shape;
            if (polygon == this)
            {
                contentString = '<b>' + polygonArray[index].name + '</b>';
            }
        }
        if (contentString.length > 0)
        {
            // Replace the info window's content and position.
            infoWindow.setContent(contentString);
            infoWindow.setPosition(event.latLng);
            infoWindow.open(map);
        }
    }

    function focusMapObjectClick(){
        infoWindow.close(map);
        var item = $(this).parent();
        var focusedIndex = item.data('index');
        var typeIndex = item.data("type");
        if (typeIndex == 0)
        {
            for (var index = 0; index < polygonArray.length; index++) {
                var polygon = polygonArray[index].polygon;
            }
        }
        if (typeIndex == 1)
        {
            for (var index = 0; index < feedingArray.length; index++) {
                var polygon = feedingArray[index].polygon;
            }
        }
    }

    $(document).ready(function () {
        $("#map-legend").on("click", ".focus-map-object", focusMapObjectClick);
    });
    google.maps.event.addDomListener(window, 'load', initialize);

    </script>
}
